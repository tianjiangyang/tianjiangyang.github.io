{"version":3,"sources":["utils/lazyload.js","scripts/index.js","scripts/views/index.js","logo.svg","App.js","serviceWorker.js","scripts/reducers/index.js","scripts/reducers/updateGood.js","scripts/reducers/imgName.js","scripts/reducers/richtexteditor.js","store.js","index.js"],"names":["loadingComponent","loader","loading","Loadable","MainRouter","style","width","height","basename","component","Layout","Component","path","exact","render","to","LazyLoad","module","exports","App","className","Boolean","window","location","hostname","match","reducers","combineReducers","updateGood","state","action","type","payload","imgName","richTextEditor","store","createStore","applyMiddleware","thunk","promise","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAA,qCAIMA,EAAkB,WACpB,OACI,yCAKO,aAACC,GAAqC,IAA9BC,EAA6B,uDAAnBF,EAC7B,OAAOG,IAAS,CACZF,SACAC,c,oJCRaE,E,iLAEb,OACI,uBAAKC,MAAO,CAACC,MAAM,OAAOC,OAAO,SAC7B,gBAAC,IAAD,CACAC,SAAS,KAEL,gBAAC,IAAD,CAAOC,UAAWC,Y,GAPEC,K,4KCAnBD,E,iLAEb,OACI,uBAAKL,MAAO,CAACC,MAAM,OAAOC,OAAO,SAC7B,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAOK,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAK,gBAAC,IAAD,CAAUC,GAAG,UAAb,QACnC,gBAAC,IAAD,CAAOH,KAAK,SAASH,UAAWO,aAAS,kBAAI,8EAC7C,gBAAC,IAAD,CAAOJ,KAAK,SAASH,UAAWO,aAAS,kBAAI,iEAC7C,gBAAC,IAAD,CAAOF,OAAQ,kBAAK,gBAAC,IAAD,CAAUC,GAAG,oB,GARjBJ,K,iICNpCM,EAAOC,QAAU,IAA0B,kC,mICc5BC,MARf,WACE,OACE,yBAAKC,UAAU,OACX,kBAAC,IAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCROC,EAAWC,YAAgB,CACrCC,WCTuB,WAAoB,IAAnBC,EAAkB,uDAAZ,GAAGC,EAAS,uCACzC,OAAOA,EAAOC,MACV,IAAK,mBAGL,IAAK,kBACD,OAAeD,EAAOE,QAE1B,QACI,OAAOH,IDChBI,QEZoB,WAAyB,IAAxBJ,EAAuB,uDAAf,GAAIC,EAAW,uCAC9C,OAAQA,EAAOC,MACd,IAAK,gBAGL,IAAK,gBACJ,OAAgBD,EAAOE,QAExB,QACC,OAAOH,IFIPK,eGb2B,WAAyB,IAAxBL,EAAuB,uDAAf,GAAIC,EAAW,uCACrD,OAAQA,EAAOC,MACd,IAAK,uBAGL,IAAK,sBACJ,OAAgBD,EAAOE,QAExB,QACC,OAAOH,M,yBCGKM,EAFDC,YAAYV,EAASW,YAAgBC,IAAMC,M,QCDzDC,IAAS1B,OACR,kBAAC,IAAD,CAAUqB,MAAOA,GAChB,kBAAC,EAAD,OAEDM,SAASC,eAAe,SNoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9149a113.chunk.js","sourcesContent":["import React from 'react';\r\nimport Loadable from 'react-loadable';\r\n\r\n//通用的过场组件\r\nconst loadingComponent =()=>{\r\n    return (\r\n        <div>loading</div>\r\n    ) \r\n}\r\n\r\n//过场组件默认采用通用的，若传入了loading，则采用传入的过场组件\r\nexport default (loader,loading = loadingComponent)=>{\r\n    return Loadable({\r\n        loader,   // 需要懒加载的组件 \r\n        loading\r\n    });\r\n}","\r\n\r\nimport {HashRouter as Hash,Route} from \"react-router-dom\";\r\n\r\nimport  Layout  from \"./views\";\r\n\r\nexport default class MainRouter extends Component{\r\n    render(){\r\n        return(\r\n            <div style={{width:\"100%\",height:\"100%\"}}>\r\n                <Hash\r\n                basename=\"/\"\r\n                >\r\n                    <Route component={Layout}></Route>\r\n                </Hash>\r\n            </div>\r\n        )\r\n    }\r\n} ","\r\n\r\nimport { Switch,Route,Redirect } from \"react-router-dom\";\r\n\r\nimport LazyLoad from \"@/utils/lazyload\";\r\n\r\nexport default class Layout extends Component{\r\n    render(){\r\n        return(\r\n            <div style={{width:\"100%\",height:\"100%\"}}>\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={()=>(<Redirect to=\"/login\"> </Redirect>)}></Route>\r\n                    <Route path=\"/login\" component={LazyLoad(()=>import(\"./login\"))}></Route>\r\n                    <Route path=\"/index\" component={LazyLoad(()=>import(\"./indexPage\"))}></Route>\r\n                    <Route render={()=>(<Redirect to=\"/login\" />)}></Route>\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport MainRouter from \"~\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport {combineReducers} from \"redux\"\r\nimport { updateGood } from \"./updateGood\"\r\nimport { imgName } from \"./imgName\"\r\nimport { richTextEditor } from \"./richtexteditor\"\r\n\r\n\r\n\r\n\r\n\r\nexport const reducers = combineReducers({\r\n   updateGood:updateGood,\r\n   imgName:imgName,\r\n   richTextEditor:richTextEditor\r\n})","\r\n\r\nexport const updateGood = (state={},action)=>{\r\n    switch(action.type){\r\n        case \"changeUpdategood\":\r\n            return state = action.payload\r\n            break;\r\n        case \"clearUpdategood\":\r\n            return state = action.payload\r\n            break;\r\n        default:\r\n            return state\r\n            break;\r\n    }\r\n}","export const imgName = (state = [], action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'changeImgName':\r\n\t\t\treturn (state = action.payload);\r\n\t\t\tbreak;\r\n\t\tcase 'changeImgName':\r\n\t\t\treturn (state = action.payload);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { Upload, Icon, Modal } from 'antd';\r\n// import { connect } from 'react-redux';\r\n\r\n// function getBase64(file) {\r\n// \treturn new Promise((resolve, reject) => {\r\n// \t\tconst reader = new FileReader();\r\n// \t\treader.readAsDataURL(file);\r\n// \t\treader.onload = () => resolve(reader.result);\r\n// \t\treader.onerror = (error) => reject(error);\r\n// \t});\r\n// }\r\n\r\n// @connect(\r\n// \t(state) => ({\r\n// \t\t...state\r\n// \t}),\r\n// \t(dispatch) => ({})\r\n// )\r\n// export default class UpdateImg extends Component {\r\n// \tstate = {\r\n// \t\tpreviewVisible: false,\r\n// \t\tpreviewImage: '',\r\n// \t\tfileList: []\r\n// \t};\r\n\r\n// \thandleCancel = () => this.setState({ previewVisible: false });\r\n\r\n// \thandlePreview = async (file) => {\r\n// \t\tif (!file.url && !file.preview) {\r\n// \t\t\tfile.preview = await getBase64(file.originFileObj);\r\n// \t\t}\r\n\r\n// \t\tthis.setState({\r\n// \t\t\tpreviewImage: file.url || file.preview,\r\n// \t\t\tpreviewVisible: true\r\n// \t\t});\r\n// \t};\r\n\r\n// \thandleChange = async (file,fileList)=>{\r\n// \t\t// if()\r\n// \t\tconsole.log(file)\r\n// \t\t// this.setState({fileList})\r\n// \t};\r\n\r\n// \tcomponentWillMount() {\r\n// \t\tconst { updateGood } = this.props;\r\n// \t\tthis.setState({\r\n// \t\t\tfileList: []\r\n// \t\t});\r\n// \t\tconst BASE_IMG = 'http://localhost:5000/';\r\n// \t\tconsole.log(updateGood);\r\n// \t\tlet imgs = updateGood.imgs;\r\n// \t\tconsole.log(imgs);\r\n// \t\tif (imgs) {\r\n// \t\t\tconst fileList = imgs.map((img, index) => ({\r\n// \t\t\t\tuid: -index, // 唯一标识\r\n// \t\t\t\tname: img, // 文件名\r\n// \t\t\t\tstatus: 'done', // 状态有：uploading done error removed\r\n// \t\t\t\turl: BASE_IMG + img\r\n// \t\t\t}));\r\n// \t\t\tthis.setState({ fileList });\r\n// \t\t}\r\n// \t\tconsole.log(this.state.fileList);\r\n// \t}\r\n// \trender() {\r\n// \t\tconst { previewVisible, previewImage, fileList } = this.state;\r\n// \t\tconst uploadButton = (\r\n// \t\t\t<div>\r\n// \t\t\t\t<Icon type=\"plus\" />\r\n// \t\t\t\t<div className=\"ant-upload-text\">Upload</div>\r\n// \t\t\t</div>\r\n// \t\t);\r\n// \t\treturn (\r\n// \t\t\t<div className=\"clearfix\">\r\n// \t\t\t\t<Upload\r\n// \t\t\t\t\taction=\"http://localhost:5000/manage/img/upload\"\r\n// \t\t\t\t\tname=\"image\"\r\n// \t\t\t\t\tlistType=\"picture-card\"\r\n// \t\t\t\t\tfileList={fileList}\r\n// \t\t\t\t\tonPreview={this.handlePreview}\r\n// \t\t\t\t\tonChange={this.handleChange}\r\n// \t\t\t\t>\r\n// \t\t\t\t\t{fileList.length >= 3 ? null : uploadButton}\r\n// \t\t\t\t</Upload>\r\n// \t\t\t\t<Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\r\n// \t\t\t\t\t<img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n// \t\t\t\t</Modal>\r\n// \t\t\t</div>\r\n// \t\t);\r\n// \t}\r\n// }\r\n","export const richTextEditor = (state = '', action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'changeRichTextEditor':\r\n\t\t\treturn (state = action.payload);\r\n\t\t\tbreak;\r\n\t\tcase 'clearRichTextEditor':\r\n\t\t\treturn (state = action.payload);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n","\r\n\r\nimport {createStore,applyMiddleware} from \"redux\";\r\n\r\nimport {reducers} from \"./scripts/reducers\"\r\n\r\nimport thunk from \"redux-thunk\"\r\n\r\nimport promise from \"redux-promise\"\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunk,promise));\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"./styles/index.scss\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store\"\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}